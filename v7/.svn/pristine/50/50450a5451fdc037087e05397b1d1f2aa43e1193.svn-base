<!DOCTYPE html>
<html>
<head>
    <title>Range Test</title>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <link rel="stylesheet" href="../qunit/qunit.css" type="text/css"/>
    <style>
        #editor {
            border: 1px solid #ccc;
        }
    </style>
    <script src="../qunit/qunit.js" type="text/javascript"></script>
    <script src="../qunit/tools.js" type="text/javascript"></script>
</head>

<body>
<div id="qunit"></div>
<div id="editor"></div>
<div id="qunit-fixture"></div>

<script src="../js/editorapi.js" type="text/javascript"></script>
<script src="../../editor.js" type="text/javascript"></script>
<script>
    QUnit.config.autostart = false;
    QUnit.config.reorder = false;
    test('测试cloneContents克隆firstChild', function () {
        TestTools.setContent('<p><em>Th</em>is <strong>is first</strong> child</p><p>test1</p>');
        editor.focus();
        TestTools.setSelection('p');
        var sel = editor.selection;
        var rng = sel.getRange();
        var frag = rng.cloneContents();
        var tmpDiv = editor.doc.createElement('div');
        tmpDiv.appendChild(frag);
        equal(tmpDiv.innerHTML, '<p><em>Th</em>is <strong>is first</strong> child</p>', '克隆第一个节点通过!');
    });
    test('测试cloneContents克隆中间的节点', function () {
        TestTools.setContent('<p><em>Th</em>is <strong>is first</strong> child</p><p>test1</p><p>third line</p>');
        editor.focus();
        var middleNode = editor.domUtil.$('p')[1];
        TestTools.setSelection(middleNode);
        var sel = editor.selection;
        var rng = sel.getRange();
        var frag = rng.cloneContents();
        var tmpDiv = editor.doc.createElement('div');
        tmpDiv.appendChild(frag);
        equal(tmpDiv.innerHTML, '<p>test1</p>', '测试克隆返回值!');
    });
    test('Test cloneContents clone lastChild', function () {
        TestTools.setContent('<p><em>Th</em>is <strong>is first</strong> child</p><p>test1</p>');
        editor.focus();
        var lastNode = editor.domUtil.$('p')[1];
        TestTools.setSelection(lastNode);
        var sel = editor.selection;
        var rng = sel.getRange();
        var frag = rng.cloneContents();
        var tmpDiv = editor.doc.createElement('div');
        tmpDiv.appendChild(frag);
        equal(tmpDiv.innerHTML, '<p>test1</p>', 'clone selected lastchild contents pass!');
    });
    test('Test deleteContents delete firstChild', function () {
        TestTools.setContent('<p><em>Th</em>is <strong>is first</strong> child</p><p>test1</p>');
        editor.focus();
        TestTools.setSelection('p');
        var sel = editor.selection;
        var rng = sel.getRange();
        rng.deleteContents();
        equal(editor.getContent(), '<p>test1</p>', 'Delete selected contents pass!');
    });
    test('Test deleteContents delete middle child', function () {
        TestTools.setContent('<p><em>Th</em>is <strong>is first</strong> child</p><p>test1</p><p>third line</p>');
        editor.focus();
        var middleNode = editor.domUtil.$('p')[1];
        TestTools.setSelection(middleNode);
        var sel = editor.selection;
        var rng = sel.getRange();
        rng.deleteContents();
        equal(editor.getContent(), '<p><em>Th</em>is <strong>is first</strong> child</p><p>third line</p>', 'Delete selected contents pass!');
    });
    test('Test deleteContents delete lastChild', function () {
        TestTools.setContent('<p>This is first child</p><p>This is second child</p>');
        editor.focus();
        var lastNode = editor.domUtil.$('p')[1];
        TestTools.setSelection(lastNode);
        var sel = editor.selection;
        var rng = sel.getRange();
        rng.deleteContents();
        equal(editor.getContent(), '<p>This is first child</p>', 'Delete selected contents pass!');
    });
    test('Test insertNode to middle', function () {
        TestTools.setContent('<p>This is first child</p><p>This is second child</p>');
        editor.focus();
        var lastNode = editor.domUtil.$('p')[1];
        var sel = editor.selection;
        var rng = sel.createRange();
        rng.setStart(lastNode.firstChild, 5);
        rng.collapse(true);
        var node = editor.doc.createElement('p');
        node.innerHTML = 'This is insert node';
        rng.insertNode(node);
        equal(editor.getContent(), '<p>This is first child</p><p>This <p>This is insert node</p>is second child</p>', 'insert node to middle of text node');
    });
    test('extractContents: test start contain end node', function () {
        TestTools.setContent('<p><em>This is first </em>child</p><p>This is second child</p>');
        editor.focus();
        var node = editor.domUtil.$('p')[0];
        var rng = editor.selection.createRange();
        rng.setStart(node.firstChild.firstChild, 7);
        rng.collapse(true);
        rng.select();
        equal(rng.startContainer, editor.domUtil.$('em')[0].firstChild, '设置文本选区');
        rng.setStartBefore(node);
        rng.select();
        var testDiv = editor.doc.createElement('div');
        testDiv.appendChild(rng.extractContents());
        equal(testDiv.innerHTML, '<p><em>This is</em></p>', '测试剪切开始节点包含结束节点的选区');
    });
    test('extractContents: Two parent test end contain start node', function () {
        TestTools.setContent('<p>This is first child</p><p>This is <em>second child</em></p>');
        editor.focus();
        var lastNode = editor.domUtil.$('p')[1];
        var rng = editor.selection.createRange();
        rng.setStart(lastNode.childNodes[1].firstChild, 7);
        rng.collapse(true);
        rng.select();
        rng.setEndAfter(lastNode);
        rng.select();
        var testDiv = editor.doc.createElement('div');
        testDiv.appendChild(rng.extractContents());
        equal(testDiv.innerHTML, '<p><em>child</em></p>', 'Two parent pass!');
    });
    test('extractContents: One parent test end contain start node', function () {
        TestTools.setContent('<p>This is first child</p><p>This is <em>second child</em></p>');
        editor.focus();
        var lastNode = editor.domUtil.$('p')[1];
        var rng = editor.selection.createRange();
        rng.setStart(lastNode.childNodes[1].firstChild, 7);
        rng.collapse(true);
        rng.select();
        rng.setEndAfter(rng.startContainer);
        rng.select();
        var testDiv = editor.doc.createElement('div');
        testDiv.appendChild(rng.extractContents());
        equal(testDiv.innerHTML, '<em>child</em>', 'One parent pass!');
    });

    test('extractContents: 测试剪切文本，并且重置光标', function () {
        TestTools.setContent('<p>解决同一个问题可以有很多种算法，比较评价算法的好坏，一个重要的标准就是算法的时间复杂度</p>');
        // 设置
        editor.focus();
        var txtNode = (editor.domUtil.$('p')[0]).childNodes[0];
        var rng = editor.selection.createRange();
        var startOffset = 7, endOffset = 15;
        rng.setStart(txtNode, startOffset);
        rng.setEnd(txtNode, endOffset);

        var testDiv = editor.doc.createElement('div');
        testDiv.appendChild(rng.extractContents());
        equal(testDiv.innerHTML, '可以有很多种算法', '测试剪切的文字是否为“可以有很多种算法”');

        var newNode = (editor.domUtil.$('p')[0]).childNodes[0];
        var newRang = editor.selection.getRange();
        equal(newRang.startContainer, newNode, '重置后的Range startContainer与原来的相同');
        equal(newRang.startOffset, startOffset, '重置后的Range startOffset与原来的相同');
        equal(newRang.collapsed, true, '选区折叠了');
    });

    var editor = SinaEditor.create({
        root: 'editor',
        plugins: [
            {
                name: 'initDivContent',
                params: {}
            },
            {
                name: 'bold',
                params: {}
            }
        ]
    });
    editor.ready(function () {
        setTimeout(function () {
            QUnit.start();
        }, 500)
    });
</script>
</body>
</html>
